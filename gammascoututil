#!/usr/bin/python3
#
#	GammaScoutUtil - Tool to communicate with Gamma Scout Geiger counters.
#	Copyright (C) 2011-2011 Johannes Bauer
#	
#	This file is part of GammaScoutUtil.
#
#	GammaScoutUtil is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	GammaScoutUtil is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with GammaScoutUtil; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>
#

import sys
import traceback
import textwrap

from Exceptions import CommunicationException, InvalidArgumentException
from ArgumentParser import ArgumentParser
from GammaCommands import GammaCommands
from LogSetup import LogSetup

args = ArgumentParser()
args.parseordie()

LogSetup(args).setup()

cmdinterface = GammaCommands(args)
try:
	cmdinterface.connect()
	cmdinterface.execute()
except CommunicationException as e:
	print("Communication error: %s" % (str(e)), file = sys.stderr)
	reasons = [ ]
	if (e.gettype() == "timeout") and (args["protocol"] == "v1"):
		reasons.append("Did you maybe forget to put the Gamma Scout into PC mode?")
	if e.gettype() == "timeout":
		reasons.append("Is it possible that a modem-manager process interferes with '%s'?" % (args["device"]))
	if len(reasons) > 0:
		print("Possible reasons for this:")
		for reason in reasons:
			for line in textwrap.wrap(reason, initial_indent = "   - ", subsequent_indent = "     "):
				print(line, file = sys.stderr)
except InvalidArgumentException as e:
	print("Invalid argument: %s" % (str(e)), file = sys.stderr)
except SystemExit:
	pass
except KeyboardInterrupt:
	print("Interrupted by keyboard, shutting down...")
except:
	traceback.print_exc()
finally:
	cmdinterface.close()
	sys.exit(0)

